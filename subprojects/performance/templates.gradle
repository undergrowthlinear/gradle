/*
 * Copyright 2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.gradle.testing.performance.generator.tasks.JvmProjectGeneratorTask
import org.gradle.testing.performance.generator.tasks.KtsProjectGeneratorTask
import org.gradle.testing.performance.generator.tasks.MonolithicNativeProjectGeneratorTask
import org.gradle.testing.performance.generator.tasks.NativeProjectGeneratorTask
import org.gradle.testing.performance.generator.tasks.NativeProjectWithDepsGeneratorTask
import org.gradle.testing.performance.generator.tasks.RemoteProject

// === Java ===
task largeMonolithicJavaProject(type: JvmProjectGeneratorTask) {
    sourceFiles = 50000
    linesOfCodePerSourceFile = 100
    templateArgs['daemonMemory']     = '2g'
    templateArgs['compilerMemory']   = '4g'
    templateArgs['testRunnerMemory'] = '256m'
    templateArgs['testForkEvery']    = '10000'
    subProjectTemplates << 'with-junit'
}

task largeJavaMultiProject(type: JvmProjectGeneratorTask) {
    projects = 500
    templateArgs['parallel'] = true
    sourceFiles = 100
    linesOfCodePerSourceFile = 100
    templateArgs['daemonMemory']     = '2g'
    templateArgs['compilerMemory']   = '256m'
    templateArgs['testRunnerMemory'] = '256m'
    subProjectTemplates << 'with-junit'
}

task mediumJavaMultiProjectWithTestNG(type: JvmProjectGeneratorTask) {
    projects = 100
    templateArgs['parallel'] = true
    sourceFiles = 100
    linesOfCodePerSourceFile = 100
    templateArgs['daemonMemory']     = '2g'
    templateArgs['compilerMemory']   = '256m'
    templateArgs['testRunnerMemory'] = '256m'
    subProjectTemplates << 'with-testng'
}

// TODO implement VerboseTestOutputPerformanceTest with static project
task withVerboseTestNG(type: JvmProjectGeneratorTask) {
    projects = 1
    sourceFiles = 10
    subProjectTemplates << 'with-verbose-testng'
}
task withVerboseJUnit(type: JvmProjectGeneratorTask) {
    projects = 1
    sourceFiles = 10
    subProjectTemplates << 'with-verbose-junit'
}

//TODO replace with static project or direct project objects creation
task bigEmpty(type: JvmProjectGeneratorTask) {
    projects = 10000
    subProjectTemplates = ['empty']
}

//TODO replace with direct task objects creation in test
task createLotsOfTasks(type: JvmProjectGeneratorTask) {
    projects = 1
    sourceFiles = 0
    subProjectTemplates = ['task-creation']
    templateArgs = [
        taskCount: 15000
    ]
    dependencyGraph {
        size = 0
    }

    numberOfExternalDependencies = 0
}

// === Gradle Script Kotlin ===
task ktsManyProjects(type: KtsProjectGeneratorTask) {
    projects = 100
    sourceFiles = 0
}

task ktsSmall(type: KtsProjectGeneratorTask) {
}

// === Native ===
task smallNative(type: NativeProjectGeneratorTask) {
    projects = 1
    sourceFiles = 20
    templateArgs = [
        moduleCount: 1,
        functionCount: 1
    ]
    subProjectTemplates = ['native-source', 'native-component']
}

task mediumNative(type: NativeProjectGeneratorTask) {
    projects = 1
    sourceFiles = 100
    templateArgs = [
        moduleCount: 1,
        functionCount: 20
    ]
    subProjectTemplates = ['native-source', 'native-component']
}

task bigNative(type: NativeProjectGeneratorTask) {
    projects = 1
    sourceFiles = 500
    templateArgs = [
        moduleCount: 1,
        functionCount: 50
    ]
    subProjectTemplates = ['native-source', 'native-component']
}

task multiNative(type: NativeProjectGeneratorTask) {
    projects = 10
    sourceFiles = 20
    templateArgs = [
        moduleCount: 10,
        functionCount: 20
    ]
    subProjectTemplates = ['native-source', 'native-component']
}

task manyProjectsNative(type: NativeProjectGeneratorTask) {
    projects = 100
    sourceFiles = 1
    templateArgs = [
        moduleCount: 3,
        functionCount: 1
    ]
    subProjectTemplates = ['native-source', 'native-component']
}

task native420Prj3Mod10Src10Func(type: NativeProjectGeneratorTask) {
    projects = 420
    sourceFiles = 10
    templateArgs = [
        moduleCount: 10,
        functionCount: 10
    ]
    subProjectTemplates = ['native-source', 'native-component']
}

task smallPCHNative(type: NativeProjectGeneratorTask) {
    projects = 1
    sourceFiles = 20
    templateArgs = [
        moduleCount: 1,
        functionCount: 1
    ]
    subProjectTemplates = ['native-pch-source', 'native-pch-component']
}

task mediumPCHNative(type: NativeProjectGeneratorTask) {
    projects = 1
    sourceFiles = 200
    templateArgs = [
        moduleCount: 1,
        functionCount: 1
    ]
    subProjectTemplates = ['native-pch-source', 'native-pch-component']
}

task bigPCHNative(type: NativeProjectGeneratorTask) {
    projects = 1
    sourceFiles = 1000
    templateArgs = [
        moduleCount: 1,
        functionCount: 1
    ]
    subProjectTemplates = ['native-pch-source', 'native-pch-component']
}

task nativeMonolithicOverlapping(type: MonolithicNativeProjectGeneratorTask) {
    templateArgs = [overlapWithOutput: true]
    projects = 100
    // number of source files to generate in each project of each type
    // this generates 200 C, 200 C++, 200 headers and 400 unused C/C++ files
    sourceFiles = 200
}

task nativeMonolithic(type: MonolithicNativeProjectGeneratorTask) {
    templateArgs = [overlapWithOutput: false]
    projects = 100
    sourceFiles = 200
}

task smallNativeMonolithic(type: MonolithicNativeProjectGeneratorTask) {
    templateArgs = [overlapWithOutput: false]
    projects = 2
    sourceFiles = 100
}

task mediumNativeMonolithic(type: MonolithicNativeProjectGeneratorTask) {
    templateArgs = [overlapWithOutput: false]
    projects = 10
    sourceFiles = 200
}

configure([nativeMonolithicOverlapping, nativeMonolithic, smallNativeMonolithic, mediumNativeMonolithic]) {
    templateArgs += [
        // number of functions created in each source file
        functionCount: 50,
        // number of prebuilt libraries to generate
        prebuiltLibraries: 30,
        // number of files included in each source set
        includedSourceCount: 50,
        // number of headers each source file includes
        includedHeaderCount: 10,
        // number of 'common' headers each source file includes
        includedCommonHeaderCount: 10,
    ]
    rootProjectTemplates = ['native-monolithic']
    subProjectTemplates = []
    additionalProjectFiles = ['common.gradle', 'prebuilt.gradle', 'components.gradle']
}

task nativeDependents(type: NativeProjectWithDepsGeneratorTask) {
    resources.from(fileTree(resolveTemplate("native-dependents-resources")))
    resources.from(resolveTemplate("init.gradle"))
}

task nativeDependentsDeep(type: NativeProjectWithDepsGeneratorTask) {
    resources.from(fileTree(resolveTemplate("native-dependents-resources")))
    resources.from(resolveTemplate("init.gradle"))
    generateDeepHierarchy = true
}

task k9AndroidBuild(type: RemoteProject) {
    remoteUri = 'https://github.com/gradle/perf-android-k-9.git'
    branch = 'gradle'
}

task largeAndroidBuild(type: RemoteProject) {
    remoteUri = 'https://github.com/gradle/perf-android-large.git'
    branch = 'gradle'
}

task excludeRuleMergingBuild(type: RemoteProject) {
    remoteUri = 'https://github.com/gradle/performance-comparisons.git'
    branch = 'master'
    subdirectory = 'exclude-merging'
}

task largeNativeBuild(type: RemoteProject) {
    remoteUri = 'https://github.com/gradle/perf-native-large'
    branch = 'master'
    finalizedBy 'largeNativeBuildPrebuilt'
}

task largeNativeBuildPrebuilt(type: GradleBuild) {
    buildFile = file("$largeNativeBuild.outputDirectory/prebuilt/util/build.gradle")
    dir = file("$largeNativeBuild.outputDirectory/prebuilt/util")
    tasks = ['build']
}

tasks.withType(JvmProjectGeneratorTask) {
    if (project.hasProperty("springDmPluginVersion")) {
        templateArgs['springDmPluginVersion'] = springDmPluginVersion
    }
    templateArgs['projectDependencies'] = true
}

// The Android Studio performance tests use custom model classes which need to be found in
// a dedicated project in order for the classpath to be setup properly
def androidRemoteProjects = tasks.withType(RemoteProject).matching { it.name =~ /Android/ }
androidRemoteProjects.all {
    dependsOn project(':internalAndroidPerformanceTesting').buildClassPath
    doLast {
        file("$outputDirectory/tapi-classpath.txt") << project(':internalAndroidPerformanceTesting').buildClassPath.outputFile.text
    }
}
